<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="guda.red.dao.AccountDetailDOMapper" >
  <resultMap id="BaseResultMap" type="guda.red.dao.domain.AccountDetailDO" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="account_id" property="accountId" jdbcType="BIGINT" />
    <result column="direction" property="direction" jdbcType="INTEGER" />
    <result column="amount" property="amount" jdbcType="BIGINT" />
    <result column="remark" property="remark" jdbcType="VARCHAR" />
    <result column="task_id" property="taskId" jdbcType="BIGINT" />
    <result column="account_from" property="accountFrom" jdbcType="BIGINT" />
    <result column="gmt_created" property="gmtCreated" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, account_id, direction, amount, remark, task_id, account_from, gmt_created
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="guda.red.dao.domain.AccountDetailDOCriteria" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from account_detail
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <if test="startRow >= 0" >
      limit ${startRow} , ${pageSize}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from account_detail
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from account_detail
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="guda.red.dao.domain.AccountDetailDO" >
    <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into account_detail (account_id, direction, amount, 
      remark, task_id, account_from, 
      gmt_created)
    values (#{accountId,jdbcType=BIGINT}, #{direction,jdbcType=INTEGER}, #{amount,jdbcType=BIGINT}, 
      #{remark,jdbcType=VARCHAR}, #{taskId,jdbcType=BIGINT}, #{accountFrom,jdbcType=BIGINT}, 
      #{gmtCreated,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="guda.red.dao.domain.AccountDetailDO" >
    <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into account_detail
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="accountId != null" >
        account_id,
      </if>
      <if test="direction != null" >
        direction,
      </if>
      <if test="amount != null" >
        amount,
      </if>
      <if test="remark != null" >
        remark,
      </if>
      <if test="taskId != null" >
        task_id,
      </if>
      <if test="accountFrom != null" >
        account_from,
      </if>
      <if test="gmtCreated != null" >
        gmt_created,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="accountId != null" >
        #{accountId,jdbcType=BIGINT},
      </if>
      <if test="direction != null" >
        #{direction,jdbcType=INTEGER},
      </if>
      <if test="amount != null" >
        #{amount,jdbcType=BIGINT},
      </if>
      <if test="remark != null" >
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="taskId != null" >
        #{taskId,jdbcType=BIGINT},
      </if>
      <if test="accountFrom != null" >
        #{accountFrom,jdbcType=BIGINT},
      </if>
      <if test="gmtCreated != null" >
        #{gmtCreated,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="guda.red.dao.domain.AccountDetailDOCriteria" resultType="java.lang.Integer" >
    select count(*) from account_detail
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByPrimaryKeySelective" parameterType="guda.red.dao.domain.AccountDetailDO" >
    update account_detail
    <set >
      <if test="accountId != null" >
        account_id = #{accountId,jdbcType=BIGINT},
      </if>
      <if test="direction != null" >
        direction = #{direction,jdbcType=INTEGER},
      </if>
      <if test="amount != null" >
        amount = #{amount,jdbcType=BIGINT},
      </if>
      <if test="remark != null" >
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="taskId != null" >
        task_id = #{taskId,jdbcType=BIGINT},
      </if>
      <if test="accountFrom != null" >
        account_from = #{accountFrom,jdbcType=BIGINT},
      </if>
      <if test="gmtCreated != null" >
        gmt_created = #{gmtCreated,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="guda.red.dao.domain.AccountDetailDO" >
    update account_detail
    set account_id = #{accountId,jdbcType=BIGINT},
      direction = #{direction,jdbcType=INTEGER},
      amount = #{amount,jdbcType=BIGINT},
      remark = #{remark,jdbcType=VARCHAR},
      task_id = #{taskId,jdbcType=BIGINT},
      account_from = #{accountFrom,jdbcType=BIGINT},
      gmt_created = #{gmtCreated,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>